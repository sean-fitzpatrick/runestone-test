<?xml version="1.0" encoding="UTF-8" ?>

<section xml:id="sec-python-basics">
  <title>Python basics</title>
  <p>
    OK, so you've logged into Syzygy and you're ready to write some code.
    What does basic code look like in Python?
    The good news is that you don't need to be a programmer to do linear algebra in Python.
    Python includes many different <em>libraries</em> that keep most of the code under the hood,
    so all you have to remember is what command you need to use to accomplish a task.
    That said, it won't hurt to learn a little bit of basic coding.
  </p>

  <p>
    Basic arithmetic operations are understood, and you can simply type them in.
    Hit <c>shift+enter</c> in a code cell to execute the code and see the result.
  </p>

  <sage>
    <input>
      3+4
    </input>
  </sage>

  <sage>
    <input>
      3*4
    </input>
  </sage>

  <sage>
    <input>
      3**4
    </input>
  </sage>

    <p>
      OK, great. But sometimes we want to do calculations with more than one step.
      For that, we can assign variables.
    </p>

    <sage>
      <input>
        a = 14
        b = -9
        c = a+b
        print(a, b, c)
      </input>
    </sage>

    <p>
      Sometimes you might need input that's a string, rather than a number.
      We can do that, too.
    </p>

    <sage>
      <input>
        string_var = "Hey, look at my string!"
        print(string_var)
      </input>
    </sage>

    <p>
      Another basic construction is a list.
      Getting the hang of lists is useful, because in a sense,
      matrices are just really fancy lists.
    </p>

    <sage>
      <input>
        empty_list = list()
        this_too = []
        list_of_zeros = [0]*7
        print(list_of_zeros)
      </input>
    </sage>

    <p>
      Once you have an empty list, you might want to add something to it.
      This can be done with the <c>append</c> command.
    </p>

    <sage>
      <input>
        empty_list.append(3)
        print(empty_list)
        print(len(empty_list))
      </input>
    </sage>

    <p>
      Go back and re-run the above code cell two or three more times.
      What happens? Probably you can guess what the <c>len</c> command is for.
      Now let's get really carried away and do some <q>for real</q> coding, like loops!
    </p>

    <sage>
      <input>
        for i in range(10):
            empty_list.append(i)
        print(empty_list)
      </input>
    </sage>

    <p>
      Notice the indentation in the second line.
      This is how Python handles things like for loops, with indentation rather than bracketing.
      We could say more about lists but perhaps it's time to talk about matrices.
      For further reading, you can <url href="https://developers.google.com/edu/python/lists" visual="developers.google.com/edu/python/lists">start here</url>.
    </p>
</section>
